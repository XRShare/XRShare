<Plan>
1.  **Fix iOS Tap-to-Add:** Modify the `ActionSheet` button action in `XRAnatomyView.swift` to set `modelManager.selectedModelID` when a model is chosen for placement. This ensures the `handleTap` function in `ARViewModel` finds the selected model type.
2.  **Fix iOS Early Multipeer Start:**
    *   Remove the logic within `ARViewModel.loadModels()` that automatically starts multipeer services when `shouldStartMultipeerAfterModelsLoad` is true. Multipeer should *only* be started explicitly by user action in `StartupMenuView`.
    *   Remove the `shouldStartMultipeerAfterModelsLoad` property from `ARViewModel`.
    *   Remove the `deferMultipeerServicesUntilModelsLoad()` method from `ARViewModel`.
    *   Remove the call to `deferMultipeerServicesUntilModelsLoad()` in `XRAnatomyApp.swift`.
</Plan>

<file path="/Users/alikara/Desktop/CPSC 599/XR-Anatomy-App-2 copy 2/XR Anatomy/XRAnatomyView.swift" action="modify">
  <change>
    <description>Update ActionSheet button action to set modelManager.selectedModelID</description>
    <search>
===
                                    buttons: modelManager.modelTypes.map { modelType in
                                        .default(Text(modelType.rawValue.capitalized)) {
                                            // Find the corresponding Model object if needed
                                            if let model = arViewModel.models.first(where: { $0.modelType == modelType }) {
                                                arViewModel.selectedModel = model
                                                print("Selected model for placement: \(modelType.rawValue)")
                                                // Show placement instructions
                                                arViewModel.alertItem = AlertItem(title: "Model Selected", message: "Tap on a surface to place the \(modelType.rawValue).")
                                            } else {
                                                print("Error: Could not find Model object for type \(modelType.rawValue)")
                                            }
                                        }
                                    } + [.cancel()]
                                )
                            }
                            
                            // Trash / reset
===
    </search>
    <content>
===
                                    buttons: modelManager.modelTypes.map { modelType in
                                        .default(Text(modelType.rawValue.capitalized)) {
                                            // Set the selected model ID in ModelManager for handleTap
                                            modelManager.selectedModelID = modelType
                                            
                                            // Keep setting arViewModel.selectedModel if other UI relies on it (optional)
                                            if let model = arViewModel.models.first(where: { $0.modelType == modelType }) {
                                                 arViewModel.selectedModel = model
                                            } else {
                                                 // If the model isn't in arViewModel.models yet, maybe load it?
                                                 // Or rely solely on modelManager.selectedModelID
                                                 print("Note: Model object for \(modelType.rawValue) not found in arViewModel.models list.")
                                            }
                                            
                                            print("Selected model type for placement: \(modelType.rawValue)")
                                            // Show placement instructions
                                            arViewModel.alertItem = AlertItem(title: "Model Selected", message: "Tap on a surface to place the \(modelType.rawValue).")
                                        }
                                    } + [.cancel()]
                                )
                            }
                            
                            // Trash / reset
===
    </content>
  </change>
</file>

<file path="/Users/alikara/Desktop/CPSC 599/XR-Anatomy-App-2 copy 2/Shared/ARViewModel.swift" action="modify">
  <change>
    <description>Remove shouldStartMultipeerAfterModelsLoad property</description>
    <search>
===
    private var subscriptions = Set<AnyCancellable>()

    // Multipeer state flags
    private var shouldStartMultipeerAfterModelsLoad: Bool = false

    // Reference to ModelManager (Now shared)
    // Use weak var if ModelManager might hold a strong ref back, otherwise strong is fine.
===
    </search>
    <content>
===
    private var subscriptions = Set<AnyCancellable>()

    // Reference to ModelManager (Now shared)
    // Use weak var if ModelManager might hold a strong ref back, otherwise strong is fine.
===
    </content>
  </change>
  <change>
    <description>Remove automatic multipeer start from loadModels()</description>
    <search>
===
                    message: "\(mt.rawValue.capitalized): \(error.localizedDescription)"
                )
            default:
                break
            }

            // REMOVE THIS BLOCK - Multipeer should only start on user action from menu
            // if (loadedModels + failedModels) >= totalModels && self.shouldStartMultipeerAfterModelsLoad {
            //     self.startMultipeerServices()
            //     self.shouldStartMultipeerAfterModelsLoad = false
            // }
        }
    }

    private func updateLoadingProgress(loaded: Int, failed: Int, total: Int) {
===
    </search>
    <content>
===
                    message: "\(mt.rawValue.capitalized): \(error.localizedDescription)"
                )
            default:
                break
            }

            // Removed automatic start of multipeer services after model loading.
            // This should now only happen explicitly via StartupMenuView or MainMenu.

        } // End of loop
        
        // Ensure progress hits 1.0 if it hasn't already
        if loadingProgress < 1.0 {
             updateLoadingProgress(loaded: loadedModels, failed: failedModels, total: totalModels)
        }
    }

    private func updateLoadingProgress(loaded: Int, failed: Int, total: Int) {
===
    </content>
  </change>
  <change>
    <description>Remove deferMultipeerServicesUntilModelsLoad method</description>
    <search>
===
        self.selectedSession = session
    }

    /// Defers multipeer service start until models are loaded
    func deferMultipeerServicesUntilModelsLoad() {
        print("Deferring multipeer services until models load")
        self.shouldStartMultipeerAfterModelsLoad = true
    }

    // MARK: - Test Messaging
===
    </search>
    <content>
===
        self.selectedSession = session
    }

    // Removed deferMultipeerServicesUntilModelsLoad() - No longer needed.

    // MARK: - Test Messaging
===
    </content>
  </change>
  <change>
    <description>Remove check for shouldStartMultipeerAfterModelsLoad in setupARView</description>
    <search>
===
        // For now, let's assume default behavior is acceptable.

        // Only start multipeer here if it wasn't deferred
        if !self.shouldStartMultipeerAfterModelsLoad && self.multipeerSession == nil {
            self.startMultipeerServices()
        }
    }

    /// Handle tap gestures for model placement OR selection/interaction (iOS)
===
    </search>
    <content>
===
        // For now, let's assume default behavior is acceptable.

        // Removed automatic start of multipeer services from setupARView.
        // Multipeer is now started only via StartupMenuView actions.
    }

    /// Handle tap gestures for model placement OR selection/interaction (iOS)
===
    </content>
  </change>
</file>

<file path="/Users/alikara/Desktop/CPSC 599/XR-Anatomy-App-2 copy 2/XR Anatomy/XRAnatomy.swift" action="modify">
  <change>
    <description>Remove call to deferMultipeerServicesUntilModelsLoad in onAppear</description>
    <search>
===
                    arViewModel.modelManager = modelManager
                    
                    // Initialize the model loading process but defer multipeer
                    arViewModel.deferMultipeerServicesUntilModelsLoad()
                    // Use Task for async loading
                    Task {
                        await arViewModel.loadModels()
===
    </search>
    <content>
===
                    arViewModel.modelManager = modelManager
                    
                    // Initialize the model loading process. Multipeer is started via menu selection.
                    // Use Task for async loading
                    Task {
                        await arViewModel.loadModels()
===
    </content>
  </change>
</file>